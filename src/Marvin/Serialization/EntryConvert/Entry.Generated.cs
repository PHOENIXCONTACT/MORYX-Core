/*
 * This code was generated by the CGbR generator on 14.11.2017. Any manual changes will be lost on the next build.
 * 
 * For questions or bug reports please refer to https://github.com/Toxantron/CGbR or contact the distributor of the
 * 3rd party generator target.
 */

//TODO: Regenerate files using CGbR if fix of #30 is available in Release build: https://github.com/Toxantron/CGbR/issues/30

using System;
using System.Collections.Generic;

namespace Marvin.Serialization
{
    /// <summary>
    /// Auto generated class by CGbR project
    /// </summary>
    public partial class Entry
    {
        #region Cloneable

        /// <summary>
        /// Method to create a deep or shallow copy of this object
        /// </summary>
        public Entry Clone(bool deep)
        {
            var copy = new Entry();
            // All value types can be simply copied
            copy.Description = Description; 
            if (deep)
            {
                // In a deep clone the references are cloned 
                if (Key != null)
                {
                    copy.Key = Key.Clone(true);
                }
                if (Value != null)
                {
                    copy.Value = Value.Clone(true);
                }
                if (Validation != null)
                {
                    copy.Validation = Validation.Clone(true);
                }
 
                if (SubEntries != null)
                {
                    var tempSubEntries = new List<Entry>(SubEntries.Count);
                    for (var i = 0; i < SubEntries.Count; i++)
                    {
                        var value = SubEntries[i];
                        if (value != null)
                        {
                            value = value.Clone(true);
                        }
                        tempSubEntries.Add(value);
                    }
                    copy.SubEntries = tempSubEntries;
                }
 
                if (Prototypes != null)
                {
                    var tempPrototypes = new List<Entry>(Prototypes.Count);
                    for (var i = 0; i < Prototypes.Count; i++)
                    {
                        var value = Prototypes[i];
                        if (value != null)
                        {
                            value = value.Clone(true);
                        }
                        tempPrototypes.Add(value);
                    }
                    copy.Prototypes = tempPrototypes;
                }
            }
            else
            {
                // In a shallow clone only references are copied
                copy.Key = Key; 
                copy.Value = Value; 
                copy.Validation = Validation; 
                copy.SubEntries = SubEntries; 
                copy.Prototypes = Prototypes; 
            }
            return copy;
        }

        
        #endregion

    }
}