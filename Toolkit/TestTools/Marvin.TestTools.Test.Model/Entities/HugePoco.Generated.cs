//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the Marvin template for generating a DbContext and Entities. 
// If you have any questions or suggestions for improvement regarding this code, contact Thomas Fuchs. I allways need feedback to improve.
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Linq;
using Marvin.Model;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace Marvin.TestTools.Test.Model
{

    /// <summary>
    /// A huge poco
    /// </summary>
    /// <LongDescription>
    /// The huge poco contains a lot of pocos for test
    /// </LongDescription>
    [System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    public partial class HugePoco : IEquatable<HugePoco>, IMergeParent, IEntity    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public HugePoco()
        {
        }


        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual long Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;

    
        /// <summary>
        /// There are no comments for Float1 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual double Float1
        {
            get
            {
                return _float1;
            }
            set
            {
                if (_float1 != value)
                {
                    _float1 = value;
                    OnPropertyChanged("Float1");
                }
            }
        }
        private double _float1;

    
        /// <summary>
        /// There are no comments for Name1 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual string Name1
        {
            get
            {
                return _name1;
            }
            set
            {
                if (_name1 != value)
                {
                    _name1 = value;
                    OnPropertyChanged("Name1");
                }
            }
        }
        private string _name1;

    
        /// <summary>
        /// There are no comments for Number1 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual int Number1
        {
            get
            {
                return _number1;
            }
            set
            {
                if (_number1 != value)
                {
                    _number1 = value;
                    OnPropertyChanged("Number1");
                }
            }
        }
        private int _number1;

    
        /// <summary>
        /// There are no comments for Float2 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual double Float2
        {
            get
            {
                return _float2;
            }
            set
            {
                if (_float2 != value)
                {
                    _float2 = value;
                    OnPropertyChanged("Float2");
                }
            }
        }
        private double _float2;

    
        /// <summary>
        /// There are no comments for Name2 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual string Name2
        {
            get
            {
                return _name2;
            }
            set
            {
                if (_name2 != value)
                {
                    _name2 = value;
                    OnPropertyChanged("Name2");
                }
            }
        }
        private string _name2;

    
        /// <summary>
        /// There are no comments for Number2 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual int Number2
        {
            get
            {
                return _number2;
            }
            set
            {
                if (_number2 != value)
                {
                    _number2 = value;
                    OnPropertyChanged("Number2");
                }
            }
        }
        private int _number2;

    
        /// <summary>
        /// There are no comments for Float3 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual double Float3
        {
            get
            {
                return _float3;
            }
            set
            {
                if (_float3 != value)
                {
                    _float3 = value;
                    OnPropertyChanged("Float3");
                }
            }
        }
        private double _float3;

    
        /// <summary>
        /// There are no comments for Name3 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual string Name3
        {
            get
            {
                return _name3;
            }
            set
            {
                if (_name3 != value)
                {
                    _name3 = value;
                    OnPropertyChanged("Name3");
                }
            }
        }
        private string _name3;

    
        /// <summary>
        /// There are no comments for Number3 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual int Number3
        {
            get
            {
                return _number3;
            }
            set
            {
                if (_number3 != value)
                {
                    _number3 = value;
                    OnPropertyChanged("Number3");
                }
            }
        }
        private int _number3;

    
        /// <summary>
        /// There are no comments for Float4 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual double Float4
        {
            get
            {
                return _float4;
            }
            set
            {
                if (_float4 != value)
                {
                    _float4 = value;
                    OnPropertyChanged("Float4");
                }
            }
        }
        private double _float4;

    
        /// <summary>
        /// There are no comments for Name4 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual string Name4
        {
            get
            {
                return _name4;
            }
            set
            {
                if (_name4 != value)
                {
                    _name4 = value;
                    OnPropertyChanged("Name4");
                }
            }
        }
        private string _name4;

    
        /// <summary>
        /// There are no comments for Number4 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual int Number4
        {
            get
            {
                return _number4;
            }
            set
            {
                if (_number4 != value)
                {
                    _number4 = value;
                    OnPropertyChanged("Number4");
                }
            }
        }
        private int _number4;

    
        /// <summary>
        /// There are no comments for Float5 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual double Float5
        {
            get
            {
                return _float5;
            }
            set
            {
                if (_float5 != value)
                {
                    _float5 = value;
                    OnPropertyChanged("Float5");
                }
            }
        }
        private double _float5;

    
        /// <summary>
        /// There are no comments for Name5 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual string Name5
        {
            get
            {
                return _name5;
            }
            set
            {
                if (_name5 != value)
                {
                    _name5 = value;
                    OnPropertyChanged("Name5");
                }
            }
        }
        private string _name5;

    
        /// <summary>
        /// There are no comments for Number5 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual int Number5
        {
            get
            {
                return _number5;
            }
            set
            {
                if (_number5 != value)
                {
                    _number5 = value;
                    OnPropertyChanged("Number5");
                }
            }
        }
        private int _number5;


        #endregion
        #region IEquatable
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object other)
        {
            return Equals(other as HugePoco); 
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The HugePoco to compare with the current HugePoco.</param>
        /// <returns><c>true</c> if the specified HugePoco is equal to the current HugePoco; otherwise, <c>false</c>.</returns>
        public bool Equals(HugePoco other)
        {
            if((object)other == null)
                return false;
            
            // First look for Id, then compare references
            return (Id != 0 && Id == other.Id) || object.ReferenceEquals(this, other);
        }
     
        /// <summary>
        /// Compares two HugePoco objects.
        /// </summary>
        /// <param name="a">The first HugePoco to compare</param>
        /// <param name="b">The second HugePoco to compare</param>
        /// <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        public static bool operator ==(HugePoco  a, HugePoco  b)
        {
            if((object)a == null && (object)b == null)
                return true;
            return (object)a != null && a.Equals(b);
        }

        /// <summary>
        /// Compares two HugePoco objects.
        /// </summary>
        /// <param name="a">The first HugePoco to compare</param>
        /// <param name="b">The second HugePoco to compare</param>
        /// <returns><c>true</c> if the specified objects are not equal; otherwise, <c>false</c>.</returns>
        public static bool operator !=(HugePoco  a, HugePoco b)
        {
            return !(a == b);
        }

        #endregion
        
        /// <summary>
        /// Reference to merged child
        /// </summary>
        object IMergeParent.Child { get; set; }
    
        #region INotifyPropertyChanged Members

        /// <summary>
        /// Raised when a property value changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises a PropertyChanged event.
        /// </summary>
        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
