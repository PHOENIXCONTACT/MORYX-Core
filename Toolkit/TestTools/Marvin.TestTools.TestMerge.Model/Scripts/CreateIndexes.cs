using System;
using System.Collections.Generic;
using System.Text;
using Marvin.Model;

namespace Marvin.TestTools.TestMerge.Model
{
	/// <summary>
	/// MARVIN Script class to generate indexes for generated tables                                       
	/// This is autogenerated code, therefor any modifications are useless and will be lost on recreation. 
	///                                                                                                    
	/// If you have questions or modification requests contact Thomas Fuchs.                               
	/// </summary>
	internal class TestMergeIndexesScipt : IDatabaseScript
	{
		/// <summary>
		/// Internal class representing a single index
		/// </summary>
		private class Index
		{
			internal Index(string name, string table, string columns)
			{
				Name = name;
				Table = table;
				Columns = columns;
			}

			internal string Name { get; private set; }

			internal string Table { get; private set; }

			internal string Columns { get; private set; }
		}

		public string Name { get { return "TestMergeIndexesScipt"; } }

    public bool IsCreationScript { get { return true; } }

		public string GetText()
		{
			var indexes = GenerateIndexArray();
			return BuildScript(indexes);	
		}

		private IEnumerable<Index> GenerateIndexArray()
		{
			var indexes = new List<Index>
			{
				new Index("IDX_EnhancedChild_Blub", "\"EnhancedChild\"", "\"Blub\""),
				new Index("IDX_MergedBaseTPT_Temp", "\"MergedBaseTPT\"", "\"Temp\""),
				new Index("IDX_MergedChildTPT2_B", "\"MergedChildTPT2\"", "\"B\""),
				new Index("IDX_MergedBaseTPH_Temp", "\"MergedBaseTPH\"", "\"Temp\""),
				new Index("IDX_MergedBaseTPH_B", "\"MergedBaseTPH\"", "\"B\""),
				new Index("IDX_MergedBaseTPH_C", "\"MergedBaseTPH\"", "\"C\""),
				new Index("IDX_MergedChildTPC1_Temp", "\"MergedChildTPC1\"", "\"Temp\""),
				new Index("IDX_MergedChildTPC1_ABC", "\"MergedChildTPC1\"", "\"ABC\""),
				new Index("IDX_MergedChildTPC2_Temp", "\"MergedChildTPC2\"", "\"Temp\""),
				new Index("IDX_EnhancedChild_Updated_Deleted", "\"EnhancedChild\"", "\"Updated\", \"Deleted\""),
				new Index("IDX_MergedBaseTPT_CombinedBaseTPT", "\"MergedBaseTPT\"", "\"CombinedBaseTPT\""),
				new Index("IDX_MergedChildTPT1_CombinedChildTPT", "\"MergedChildTPT1\"", "\"CombinedChildTPT\""),
				new Index("IDX_MergedChildTPT2_Combi1TPT_Combi2TPT", "\"MergedChildTPT2\"", "\"Combi1TPT\", \"Combi2TPT\""),
				new Index("IDX_MergedBaseTPH_CombinedBaseTPH_CombinedChildTPH", "\"MergedBaseTPH\"", "\"CombinedBaseTPH\", \"CombinedChildTPH\""),
				new Index("IDX_MergedBaseTPH_Combi1TPH_Combi2TPH", "\"MergedBaseTPH\"", "\"Combi1TPH\", \"Combi2TPH\""),
				new Index("IDX_MergedChildTPC1_CombinedBaseTPC", "\"MergedChildTPC1\"", "\"CombinedBaseTPC\""),
				new Index("IDX_MergedChildTPC2_CombinedBaseTPC_CombinedChildTPC", "\"MergedChildTPC2\"", "\"CombinedBaseTPC\", \"CombinedChildTPC\""),
				new Index("IDX_MergedChildTPC1_Combi1TPC_Combi2TPC", "\"MergedChildTPC1\"", "\"Combi1TPC\", \"Combi2TPC\""),
			};
			return indexes;
		}

		private string BuildScript(IEnumerable<Index> indexes)
		{
			var builder = new StringBuilder();
			const string buildString = 
@"CREATE INDEX {0} ON {1} USING btree ({2});";
			foreach (var index in indexes)
			{
				builder.AppendLine(string.Format(buildString, index.Name, index.Table, index.Columns));
			}
			return builder.ToString();
		}
	}
}
