//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the Marvin template for generating Repositories and a Unit of Work for Entity Framework.
// If you have any questions or suggestions for improvement regarding this code, contact Thomas Fuchs. I allways need feedback to improve.
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. So even when you think you can do better,
// don't touch it.
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Collections.Generic;
using Marvin.TestTools.Test.Model;
using System.Data.Entity.Core.Objects;
using System.Data.Entity;
using Marvin.Model;

namespace Marvin.TestTools.TestMerge.Model
{
    internal partial class MergedChildTPH2_2Repository : InheritedEntityFrameworkRepository<MergedChildTPH2_2>, IMergedChildTPH2_2Repository
    {
        public static IRepository Create(IUnitOfWork uow, DbContext context, IUnitOfWork parentUow)
        {
            var instance = new MergedChildTPH2_2Repository();
            instance.UnitOfWork = uow;
            instance.Context = context;
            instance.ParentUow = parentUow;
            instance.DbSet = context.Set<MergedChildTPH2_2>();
            return instance;
        }

        public ICollection<MergedChildTPH2_2> GetAll(bool deleted)
		{
			return DbSet.Where(e => e.Deleted == null || deleted).ToList();
		}
        public virtual MergedChildTPH2_2 GetByB(global::System.Nullable<int> b)
        {
		    return DbSet.FirstOrDefault(e => e.B == b && e.Deleted == null);
        }

        public virtual MergedChildTPH2_2 GetByTemp(global::System.Nullable<double> temp)
        {
		    return DbSet.FirstOrDefault(e => e.Temp == temp && e.Deleted == null);
        }

        public IEnumerable<MergedChildTPH2_2> GetCombiTPHInheritance(global::System.Nullable<int> combinedChildTPH)
        {
			return DbSet.Where(e => e.CombinedChildTPH == combinedChildTPH).ToList();
        }

        protected override void ExecuteRemove(MergedChildTPH2_2 entity, bool permanent)
        {
            if (permanent)
                base.ExecuteRemove(entity, permanent);
            else
                entity.Deleted = DateTime.Now;
		}

		protected override void ExecuteRemoveRange(IEnumerable<MergedChildTPH2_2> entities, bool permanent)
		{
            if (permanent)
            {
                base.ExecuteRemoveRange(entities, permanent);
            }
            else
            {
                foreach (var entity in entities)
                {
                    entity.Deleted = DateTime.Now;
                }
            }
		}

    }
}
