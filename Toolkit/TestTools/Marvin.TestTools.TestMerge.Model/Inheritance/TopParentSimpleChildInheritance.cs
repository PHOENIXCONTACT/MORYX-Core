//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the Marvin template for generating inheritance and model merge.
// If you have any questions or suggestions for improvement regarding this code, contact Thomas Fuchs. I allways need feedback to improve.
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. So even when you think you can do better,
// don't touch it.
// -----------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using Marvin.Model;
using System.Collections.Generic;
using Marvin.TestTools.Test.Model;

namespace Marvin.TestTools.TestMerge.Model
{
    public partial class SimpleChild : IMergedEntity<TopParent>
    {
        internal TopParent MergeParent 
        { 
           get;
           set;
        }

        TopParent IMergedEntity<TopParent>.Parent
        {
           get { return MergeParent; }
        }

		/// <summary>
		/// Inherited from TopParent
		/// </summary>
        public DateTime Created
        {
            get { return MergeParent.Created; }
            set { MergeParent.Created = value; }  
        }

		/// <summary>
		/// Inherited from TopParent
		/// </summary>
        public DateTime Updated
        {
            get { return MergeParent.Updated; }
            set { MergeParent.Updated = value; }  
        }

		/// <summary>
		/// Inherited from TopParent
		/// </summary>
        public Nullable<DateTime> Deleted
        {
            get { return MergeParent.Deleted; }
            set { MergeParent.Deleted = value; }  
        }

		/// <summary>
		/// Inherited from TopParent
		/// </summary>
        public Int32 Number
        {
            get { return MergeParent.Number; }
            set { MergeParent.Number = value; }  
        }

		/// <summary>
		/// Inherited from TopParent
		/// </summary>
        public Nullable<Int32> NewColumn
        {
            get { return MergeParent.NewColumn; }
            set { MergeParent.NewColumn = value; }  
        }

		/// <summary>
		/// Inherited from TopParent
		/// </summary>
        public Nullable<Double> SuperNewColumn
        {
            get { return MergeParent.SuperNewColumn; }
            set { MergeParent.SuperNewColumn = value; }  
        }

		/// <summary>
		/// Inherited from TopParent
		/// </summary>
        public ICollection<RecursiveReference> RecursiveReferences
        {
            get { return MergeParent.RecursiveReferences; }
            set { MergeParent.RecursiveReferences = value; }  
        }


    	/// <summary>
    	/// Implicit type cast operator
    	/// </summary>
        public static implicit operator TopParent(SimpleChild mergedClass)
        {
			// Only Chuck Norris can cast null objects
			if (mergedClass == null)
				return null;
				
            // extract parent            
            var parent = mergedClass.MergeParent;
            ((IMergeParent)parent).Child = mergedClass;
            return parent; 
        }

		/// <summary>
		/// Implicit type cast operator
    	/// </summary>
        public static explicit operator SimpleChild(TopParent inheritedClass)
        {
			// You shall not pass! (if you are null)
			if (inheritedClass == null)
				return null;
				
            // extract child
            var child = ((IMergeParent)inheritedClass).Child;
            if (child == null)
                throw new InvalidCastException("Base class is not of type SimpleChild");   
            return (SimpleChild)child; 
        }    
    }
}
