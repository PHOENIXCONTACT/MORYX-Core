//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the Marvin template for generating Repositories and a Unit of Work for Entity Framework.
// If you have any questions or suggestions for improvement regarding this code, contact Thomas Fuchs. I allways need feedback to improve.
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. So even when you think you can do better,
// don't touch it.
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Marvin.Model;
using Marvin.TestTools.Test.Model;


namespace Marvin.TestTools.TestMerge.Model
{
    /// <summary>
    /// The public API of the MergedChildTPT2 repository.
    /// </summary>
    public partial interface IMergedChildTPT2Repository : IRepository<MergedChildTPT2>
    {
        
        /// <summary>
        /// Load the MergedChildTPT2 entity associated with this TopParent
        /// </summary>
        MergedChildTPT2 LoadByTopParent(TopParent parent);
        
        /// <summary>
        /// Load the TopParent entity associated with this MergedChildTPT2
        /// to provide access to inherited properties.
        /// </summary>
        MergedChildTPT2 LoadTopParentProperties(MergedChildTPT2 child);
		/// <summary>
        /// Get all MergedChildTPT2s from the database
        /// </summary>
		/// <param name="deleted">Include deleted entities in result</param>
		/// <returns>A collection of entities. The result may be empty but not null.</returns>
        ICollection<MergedChildTPT2> GetAll(bool deleted);
        /// <summary>
        /// Get first MergedChildTPT2 that matches the given parameter 
        /// or null if no match was found.
        /// </summary>
        /// <param name="temp">Value the entity has to match</param>
        /// <returns>First matching MergedChildTPT2</returns>
        MergedChildTPT2 GetByTemp(double temp);
        /// <summary>
        /// Get first MergedChildTPT2 that matches the given parameter 
        /// or null if no match was found.
        /// </summary>
        /// <param name="b">Value the entity has to match</param>
        /// <returns>First matching MergedChildTPT2</returns>
        MergedChildTPT2 GetByB(int b);
        /// <summary>
        /// This method returns all matching MergedChildTPT2s for given parameters
        /// </summary>
        /// <param name="combinedBaseTPT">Value for CombinedBaseTPT the MergedChildTPT2s have to match</param>
        IEnumerable<MergedChildTPT2> GetCombinedTPTInheritance(global::System.Nullable<int> combinedBaseTPT);

        /// <summary>
        /// This method returns all matching MergedChildTPT2s for given parameters
        /// </summary>
        /// <param name="combi1TPT">Value for Combi1TPT the MergedChildTPT2s have to match</param>
        /// <param name="combi2TPT">Value for Combi2TPT the MergedChildTPT2s have to match</param>
        IEnumerable<MergedChildTPT2> GetCombiTPT(global::System.Nullable<int> combi1TPT, global::System.Nullable<int> combi2TPT);

    }
}
