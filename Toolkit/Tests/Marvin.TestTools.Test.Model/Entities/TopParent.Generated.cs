//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the Marvin template for generating a DbContext and Entities. 
// If you have any questions or suggestions for improvement regarding this code, contact Thomas Fuchs. I allways need feedback to improve.
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Linq;
using Marvin.Model;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace Marvin.TestTools.Test.Model
{

    /// <summary>
    /// There are no comments for Marvin.TestTools.Test.Model.TopParent in the schema.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [System.Runtime.Serialization.KnownType(typeof(RecursiveReference))]
    public partial class TopParent : IEquatable<TopParent>, IMergeParent, IModificationTrackedEntity    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public TopParent()
        {
        }


        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual long Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual global::System.DateTime Created
        {
            get
            {
                return _created;
            }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private global::System.DateTime _created;

    
        /// <summary>
        /// There are no comments for Updated in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual global::System.DateTime Updated
        {
            get
            {
                return _updated;
            }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private global::System.DateTime _updated;

    
        /// <summary>
        /// There are no comments for Deleted in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual global::System.Nullable<System.DateTime> Deleted
        {
            get
            {
                return _deleted;
            }
            set
            {
                if (_deleted != value)
                {
                    _deleted = value;
                    OnPropertyChanged("Deleted");
                }
            }
        }
        private global::System.Nullable<System.DateTime> _deleted;

    
        /// <summary>
        /// There are no comments for Number in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual int Number
        {
            get
            {
                return _number;
            }
            set
            {
                if (_number != value)
                {
                    _number = value;
                    OnPropertyChanged("Number");
                }
            }
        }
        private int _number;

    
        /// <summary>
        /// There are no comments for NewColumn in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual global::System.Nullable<int> NewColumn
        {
            get
            {
                return _newColumn;
            }
            set
            {
                if (_newColumn != value)
                {
                    _newColumn = value;
                    OnPropertyChanged("NewColumn");
                }
            }
        }
        private global::System.Nullable<int> _newColumn;

    
        /// <summary>
        /// There are no comments for SuperNewColumn in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual global::System.Nullable<double> SuperNewColumn
        {
            get
            {
                return _superNewColumn;
            }
            set
            {
                if (_superNewColumn != value)
                {
                    _superNewColumn = value;
                    OnPropertyChanged("SuperNewColumn");
                }
            }
        }
        private global::System.Nullable<double> _superNewColumn;


        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for RecursiveReferences in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual ICollection<RecursiveReference> RecursiveReferences
        {
		    get; set;
        }

        #endregion
        #region IEquatable
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object other)
        {
            return Equals(other as TopParent); 
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The TopParent to compare with the current TopParent.</param>
        /// <returns><c>true</c> if the specified TopParent is equal to the current TopParent; otherwise, <c>false</c>.</returns>
        public bool Equals(TopParent other)
        {
            if((object)other == null)
                return false;
            
            // First look for Id, then compare references
            return (Id != 0 && Id == other.Id) || object.ReferenceEquals(this, other);
        }
     
        /// <summary>
        /// Compares two TopParent objects.
        /// </summary>
        /// <param name="a">The first TopParent to compare</param>
        /// <param name="b">The second TopParent to compare</param>
        /// <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        public static bool operator ==(TopParent  a, TopParent  b)
        {
            if((object)a == null && (object)b == null)
                return true;
            return (object)a != null && a.Equals(b);
        }

        /// <summary>
        /// Compares two TopParent objects.
        /// </summary>
        /// <param name="a">The first TopParent to compare</param>
        /// <param name="b">The second TopParent to compare</param>
        /// <returns><c>true</c> if the specified objects are not equal; otherwise, <c>false</c>.</returns>
        public static bool operator !=(TopParent  a, TopParent b)
        {
            return !(a == b);
        }

        #endregion
        
        /// <summary>
        /// Reference to merged child
        /// </summary>
        object IMergeParent.Child { get; set; }
    
        #region INotifyPropertyChanged Members

        /// <summary>
        /// Raised when a property value changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises a PropertyChanged event.
        /// </summary>
        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
