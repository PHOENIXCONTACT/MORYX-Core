//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Marvin.Tools.Wcf.Tests.Logging {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PluginLoggerModel", Namespace="http://schemas.datacontract.org/2004/07/Marvin.Runtime.Maintenance.Plugins.LogMai" +
        "ntenance.Wcf")]
    [System.SerializableAttribute()]
    public partial class PluginLoggerModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Marvin.Logging.LogLevel ActiveLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel> ChildLoggerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel ParentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Marvin.Logging.LogLevel ActiveLevel {
            get {
                return this.ActiveLevelField;
            }
            set {
                if ((this.ActiveLevelField.Equals(value) != true)) {
                    this.ActiveLevelField = value;
                    this.RaisePropertyChanged("ActiveLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel> ChildLogger {
            get {
                return this.ChildLoggerField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildLoggerField, value) != true)) {
                    this.ChildLoggerField = value;
                    this.RaisePropertyChanged("ChildLogger");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel Parent {
            get {
                return this.ParentField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentField, value) != true)) {
                    this.ParentField = value;
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogMessages", Namespace="http://schemas.datacontract.org/2004/07/Marvin.Runtime.Maintenance.Plugins.LogMai" +
        "ntenance.Wcf")]
    [System.SerializableAttribute()]
    public partial class LogMessages : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AppenderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Marvin.Tools.Wcf.Tests.Logging.LogMessageModel> MessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessfulField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AppenderId {
            get {
                return this.AppenderIdField;
            }
            set {
                if ((this.AppenderIdField.Equals(value) != true)) {
                    this.AppenderIdField = value;
                    this.RaisePropertyChanged("AppenderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Marvin.Tools.Wcf.Tests.Logging.LogMessageModel> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Successful {
            get {
                return this.SuccessfulField;
            }
            set {
                if ((this.SuccessfulField.Equals(value) != true)) {
                    this.SuccessfulField = value;
                    this.RaisePropertyChanged("Successful");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogMessageModel", Namespace="http://schemas.datacontract.org/2004/07/Marvin.Runtime.Maintenance.Plugins.LogMai" +
        "ntenance.Wcf")]
    [System.SerializableAttribute()]
    public partial class LogMessageModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Marvin.Logging.LogLevel LogLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel LoggerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClassName {
            get {
                return this.ClassNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassNameField, value) != true)) {
                    this.ClassNameField = value;
                    this.RaisePropertyChanged("ClassName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Marvin.Logging.LogLevel LogLevel {
            get {
                return this.LogLevelField;
            }
            set {
                if ((this.LogLevelField.Equals(value) != true)) {
                    this.LogLevelField = value;
                    this.RaisePropertyChanged("LogLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel Logger {
            get {
                return this.LoggerField;
            }
            set {
                if ((object.ReferenceEquals(this.LoggerField, value) != true)) {
                    this.LoggerField = value;
                    this.RaisePropertyChanged("Logger");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Logging.ILogMaintenance")]
    public interface ILogMaintenance {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogMaintenance/GetAllPluginLogger", ReplyAction="http://tempuri.org/ILogMaintenance/GetAllPluginLoggerResponse")]
        System.Collections.Generic.List<Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel> GetAllPluginLogger();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogMaintenance/GetAllPluginLogger", ReplyAction="http://tempuri.org/ILogMaintenance/GetAllPluginLoggerResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel>> GetAllPluginLoggerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogMaintenance/AddRemoteAppender", ReplyAction="http://tempuri.org/ILogMaintenance/AddRemoteAppenderResponse")]
        int AddRemoteAppender(string name, Marvin.Logging.LogLevel minLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogMaintenance/AddRemoteAppender", ReplyAction="http://tempuri.org/ILogMaintenance/AddRemoteAppenderResponse")]
        System.Threading.Tasks.Task<int> AddRemoteAppenderAsync(string name, Marvin.Logging.LogLevel minLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogMaintenance/GetMessages", ReplyAction="http://tempuri.org/ILogMaintenance/GetMessagesResponse")]
        Marvin.Tools.Wcf.Tests.Logging.LogMessages GetMessages(int appenderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogMaintenance/GetMessages", ReplyAction="http://tempuri.org/ILogMaintenance/GetMessagesResponse")]
        System.Threading.Tasks.Task<Marvin.Tools.Wcf.Tests.Logging.LogMessages> GetMessagesAsync(int appenderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogMaintenance/RemoveRemoteAppender", ReplyAction="http://tempuri.org/ILogMaintenance/RemoveRemoteAppenderResponse")]
        void RemoveRemoteAppender(int appenderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogMaintenance/RemoveRemoteAppender", ReplyAction="http://tempuri.org/ILogMaintenance/RemoveRemoteAppenderResponse")]
        System.Threading.Tasks.Task RemoveRemoteAppenderAsync(int appenderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogMaintenance/SetLogLevel", ReplyAction="http://tempuri.org/ILogMaintenance/SetLogLevelResponse")]
        void SetLogLevel(Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel logger, Marvin.Logging.LogLevel level);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogMaintenance/SetLogLevel", ReplyAction="http://tempuri.org/ILogMaintenance/SetLogLevelResponse")]
        System.Threading.Tasks.Task SetLogLevelAsync(Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel logger, Marvin.Logging.LogLevel level);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILogMaintenanceChannel : Marvin.Tools.Wcf.Tests.Logging.ILogMaintenance, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogMaintenanceClient : System.ServiceModel.ClientBase<Marvin.Tools.Wcf.Tests.Logging.ILogMaintenance>, Marvin.Tools.Wcf.Tests.Logging.ILogMaintenance {
        
        public LogMaintenanceClient() {
        }
        
        public LogMaintenanceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LogMaintenanceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogMaintenanceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogMaintenanceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel> GetAllPluginLogger() {
            return base.Channel.GetAllPluginLogger();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel>> GetAllPluginLoggerAsync() {
            return base.Channel.GetAllPluginLoggerAsync();
        }
        
        public int AddRemoteAppender(string name, Marvin.Logging.LogLevel minLevel) {
            return base.Channel.AddRemoteAppender(name, minLevel);
        }
        
        public System.Threading.Tasks.Task<int> AddRemoteAppenderAsync(string name, Marvin.Logging.LogLevel minLevel) {
            return base.Channel.AddRemoteAppenderAsync(name, minLevel);
        }
        
        public Marvin.Tools.Wcf.Tests.Logging.LogMessages GetMessages(int appenderId) {
            return base.Channel.GetMessages(appenderId);
        }
        
        public System.Threading.Tasks.Task<Marvin.Tools.Wcf.Tests.Logging.LogMessages> GetMessagesAsync(int appenderId) {
            return base.Channel.GetMessagesAsync(appenderId);
        }
        
        public void RemoveRemoteAppender(int appenderId) {
            base.Channel.RemoveRemoteAppender(appenderId);
        }
        
        public System.Threading.Tasks.Task RemoveRemoteAppenderAsync(int appenderId) {
            return base.Channel.RemoveRemoteAppenderAsync(appenderId);
        }
        
        public void SetLogLevel(Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel logger, Marvin.Logging.LogLevel level) {
            base.Channel.SetLogLevel(logger, level);
        }
        
        public System.Threading.Tasks.Task SetLogLevelAsync(Marvin.Tools.Wcf.Tests.Logging.PluginLoggerModel logger, Marvin.Logging.LogLevel level) {
            return base.Channel.SetLogLevelAsync(logger, level);
        }
    }
}
