//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the Marvin template for generating a DbContext and Entities. 
// If you have any questions or suggestions for improvement regarding this code, contact Thomas Fuchs. I allways need feedback to improve.
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Linq;
using Marvin.Model;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace Marvin.TestTools.TestMerge.Model
{

    /// <summary>
    /// There are no comments for Marvin.TestTools.TestMerge.Model.MergedChildTPH2_1 in the schema.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    public partial class MergedChildTPH2_1 : MergedChildTPH2, IEquatable<MergedChildTPH2_1>, IMergeParent, IModificationTrackedEntity    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public MergedChildTPH2_1()
        {
        }


        #region Properties
    
        /// <summary>
        /// There are no comments for C in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual global::System.Nullable<int> C
        {
            get
            {
                return _c;
            }
            set
            {
                if (_c != value)
                {
                    _c = value;
                    OnPropertyChanged("C");
                }
            }
        }
        private global::System.Nullable<int> _c;

    
        /// <summary>
        /// There are no comments for Combi1TPH in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual global::System.Nullable<int> Combi1TPH
        {
            get
            {
                return _combi1TPH;
            }
            set
            {
                if (_combi1TPH != value)
                {
                    _combi1TPH = value;
                    OnPropertyChanged("Combi1TPH");
                }
            }
        }
        private global::System.Nullable<int> _combi1TPH;

    
        /// <summary>
        /// There are no comments for Combi2TPH in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual global::System.Nullable<int> Combi2TPH
        {
            get
            {
                return _combi2TPH;
            }
            set
            {
                if (_combi2TPH != value)
                {
                    _combi2TPH = value;
                    OnPropertyChanged("Combi2TPH");
                }
            }
        }
        private global::System.Nullable<int> _combi2TPH;


        #endregion
        #region IEquatable
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object other)
        {
            return Equals(other as MergedChildTPH2_1); 
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The MergedChildTPH2_1 to compare with the current MergedChildTPH2_1.</param>
        /// <returns><c>true</c> if the specified MergedChildTPH2_1 is equal to the current MergedChildTPH2_1; otherwise, <c>false</c>.</returns>
        public bool Equals(MergedChildTPH2_1 other)
        {
            if((object)other == null)
                return false;
            
            // First look for Id, then compare references
            return (Id != 0 && Id == other.Id) || object.ReferenceEquals(this, other);
        }
     
        /// <summary>
        /// Compares two MergedChildTPH2_1 objects.
        /// </summary>
        /// <param name="a">The first MergedChildTPH2_1 to compare</param>
        /// <param name="b">The second MergedChildTPH2_1 to compare</param>
        /// <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        public static bool operator ==(MergedChildTPH2_1  a, MergedChildTPH2_1  b)
        {
            if((object)a == null && (object)b == null)
                return true;
            return (object)a != null && a.Equals(b);
        }

        /// <summary>
        /// Compares two MergedChildTPH2_1 objects.
        /// </summary>
        /// <param name="a">The first MergedChildTPH2_1 to compare</param>
        /// <param name="b">The second MergedChildTPH2_1 to compare</param>
        /// <returns><c>true</c> if the specified objects are not equal; otherwise, <c>false</c>.</returns>
        public static bool operator !=(MergedChildTPH2_1  a, MergedChildTPH2_1 b)
        {
            return !(a == b);
        }

        #endregion
        
        /// <summary>
        /// Reference to merged child
        /// </summary>
        object IMergeParent.Child { get; set; }
    }

}
