//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the Marvin template for generating a DbContext and Entities. 
// If you have any questions or suggestions for improvement regarding this code, contact Thomas Fuchs. I allways need feedback to improve.
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Linq;
using Marvin.Model;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace Marvin.TestTools.TestMerge.Model
{

    /// <summary>
    /// There are no comments for Marvin.TestTools.TestMerge.Model.MergedChildTPT2 in the schema.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [System.Runtime.Serialization.KnownType(typeof(MergedChildTPT1))]
    public partial class MergedChildTPT2 : MergedBaseTPT, IEquatable<MergedChildTPT2>, IMergeParent, IModificationTrackedEntity    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public MergedChildTPT2()
        {
        }


        #region Properties
    
        /// <summary>
        /// There are no comments for B in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual int B
        {
            get
            {
                return _b;
            }
            set
            {
                if (_b != value)
                {
                    _b = value;
                    OnPropertyChanged("B");
                }
            }
        }
        private int _b;

    
        /// <summary>
        /// There are no comments for MergedChild1Id in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual long MergedChild1Id
        {
            get
            {
                return _mergedChild1Id;
            }
            set
            {
                if (_mergedChild1Id != value)
                {
                    _mergedChild1Id = value;
                    OnPropertyChanged("MergedChild1Id");
                }
            }
        }
        private long _mergedChild1Id;

    
        /// <summary>
        /// There are no comments for Combi1TPT in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual global::System.Nullable<int> Combi1TPT
        {
            get
            {
                return _combi1TPT;
            }
            set
            {
                if (_combi1TPT != value)
                {
                    _combi1TPT = value;
                    OnPropertyChanged("Combi1TPT");
                }
            }
        }
        private global::System.Nullable<int> _combi1TPT;

    
        /// <summary>
        /// There are no comments for Combi2TPT in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual global::System.Nullable<int> Combi2TPT
        {
            get
            {
                return _combi2TPT;
            }
            set
            {
                if (_combi2TPT != value)
                {
                    _combi2TPT = value;
                    OnPropertyChanged("Combi2TPT");
                }
            }
        }
        private global::System.Nullable<int> _combi2TPT;


        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for MergedChild1 in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual MergedChildTPT1 MergedChild1
        {
            get;
            set;
        }

        #endregion
        #region IEquatable
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object other)
        {
            return Equals(other as MergedChildTPT2); 
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The MergedChildTPT2 to compare with the current MergedChildTPT2.</param>
        /// <returns><c>true</c> if the specified MergedChildTPT2 is equal to the current MergedChildTPT2; otherwise, <c>false</c>.</returns>
        public bool Equals(MergedChildTPT2 other)
        {
            if((object)other == null)
                return false;
            
            // First look for Id, then compare references
            return (Id != 0 && Id == other.Id) || object.ReferenceEquals(this, other);
        }
     
        /// <summary>
        /// Compares two MergedChildTPT2 objects.
        /// </summary>
        /// <param name="a">The first MergedChildTPT2 to compare</param>
        /// <param name="b">The second MergedChildTPT2 to compare</param>
        /// <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        public static bool operator ==(MergedChildTPT2  a, MergedChildTPT2  b)
        {
            if((object)a == null && (object)b == null)
                return true;
            return (object)a != null && a.Equals(b);
        }

        /// <summary>
        /// Compares two MergedChildTPT2 objects.
        /// </summary>
        /// <param name="a">The first MergedChildTPT2 to compare</param>
        /// <param name="b">The second MergedChildTPT2 to compare</param>
        /// <returns><c>true</c> if the specified objects are not equal; otherwise, <c>false</c>.</returns>
        public static bool operator !=(MergedChildTPT2  a, MergedChildTPT2 b)
        {
            return !(a == b);
        }

        #endregion
        
        /// <summary>
        /// Reference to merged child
        /// </summary>
        object IMergeParent.Child { get; set; }
    }

}
