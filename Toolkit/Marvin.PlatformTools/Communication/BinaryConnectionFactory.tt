<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var currentDir = Host.ResolvePath(string.Empty);

	// Find all connections within the current folder
    var namespaces = new List<string>();
    var implementations = new List<string>();
	foreach (var directory in Directory.EnumerateDirectories(currentDir))
    {
        var found = false;
        foreach (var file in Directory.EnumerateFiles(directory))
        {
            if(!file.EndsWith("Connection.cs"))
				continue;

			implementations.Add(Path.GetFileNameWithoutExtension(file));
            found = true;
        }
        if (found)
        {
            namespaces.Add(Path.GetFileName(directory));
        }
    }

#>
using System;
<#
    foreach (var ns in namespaces)
    {
#>
using Marvin.Communication.<#= ns #>;
<#
    }
#>
using Marvin.Logging;

namespace Marvin.Communication
{
    /// <summary>
    /// Static alternative to the dependency injection factory.
    /// </summary>
    public static class BinaryConnectionFactory
    {
        /// <summary>
        /// Create a binary connection for given config and additional dependencies
        /// </summary>
        public static IBinaryConnection Create(BinaryConnectionConfig config, IMessageValidator validator, IModuleLogger logger)
        {
            IBinaryConnection instance;
            switch (config.PluginName)
            {
<#
    foreach (var implementation in implementations)
    {
#>
                case nameof(<#= implementation #>):
                    instance = new <#= implementation #>(validator) { Logger = logger.GetChild(string.Empty, typeof(<#= implementation #>)) };
                    break;
<#
    }
#>
                default:
                    throw new ArgumentException("Unknown plugin name in config!", "config");
            }

            instance.Initialize(config);
            return instance;
        }
    }
}