//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.ModelConfiguration.Conventions;
using System.Linq;
using System.Runtime.Serialization;
using Marvin.Model;
using System.Data.Entity.Core;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

namespace Marvin.Runtime.UserManagement.Model
{
    /// <summary>
    /// The DBContext of this database model.
    /// </summary>
    [DbConfigurationType(typeof(EntityFrameworkConfiguration))]
    public partial class UserManagementContainer : DbContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new UserManagementContainer object.
        /// </summary>
        public UserManagementContainer() : base(@"name=Marvin.Model.UserManagementConnectionString")
        {
            Configure(ContextMode.AllOn);
        }

        /// <summary>
        /// Initializes a new UserManagementContainer object using the connection string found in the 'UserManagementContainer' section of the application configuration file.
        /// </summary>
        public UserManagementContainer(string connectionString, ContextMode mode) :
                base(connectionString)
        {
            Configure(mode);
        }

        /// <summary>
        /// Initializes a new UserManagementContainer object using an exisiting connection.
		/// This constructor is used mainly for unit testing with the <a href="http://effort.codeplex.com/">Effort</a> in-memory database.
        /// </summary>
        public UserManagementContainer(DbConnection connection, ContextMode mode) : base(connection, true)
        {
            Configure(mode);
        }

        
        internal ContextMode CurrentMode { get; private set; }
        internal void Configure(ContextMode mode)
        {
            Configuration.ProxyCreationEnabled = ((int)mode & 0x1) != 0;
            Configuration.LazyLoadingEnabled = ((int)mode & 0x2) != 0;
            Configuration.AutoDetectChangesEnabled = ((int)mode & 0x4) != 0; ;
            Configuration.ValidateOnSaveEnabled = true;
            CurrentMode = mode;
        }
        #endregion

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {

            throw new UnintentionalCodeFirstException();
        }

    
        /// <summary>
        /// There are no comments for Library in the schema.
        /// </summary>
        public virtual DbSet<Library> Libraries { get; set; }
    
        /// <summary>
        /// There are no comments for UserGroup in the schema.
        /// </summary>
        public virtual DbSet<UserGroup> UserGroups { get; set; }
    
        /// <summary>
        /// There are no comments for Application in the schema.
        /// </summary>
        public virtual DbSet<Application> Applications { get; set; }
    
        /// <summary>
        /// There are no comments for LibraryAccess in the schema.
        /// </summary>
        public virtual DbSet<LibraryAccess> LibraryAccesses { get; set; }
    
        /// <summary>
        /// There are no comments for ApplicationAccess in the schema.
        /// </summary>
        public virtual DbSet<ApplicationAccess> ApplicationAccesses { get; set; }
    
        /// <summary>
        /// There are no comments for OperationGroup in the schema.
        /// </summary>
        public virtual DbSet<OperationGroup> OperationGroups { get; set; }
    
        /// <summary>
        /// There are no comments for Operation in the schema.
        /// </summary>
        public virtual DbSet<Operation> Operations { get; set; }
    
        /// <summary>
        /// There are no comments for OperationGroupLink in the schema.
        /// </summary>
        public virtual DbSet<OperationGroupLink> OperationGroupLinks { get; set; }
    }
}
