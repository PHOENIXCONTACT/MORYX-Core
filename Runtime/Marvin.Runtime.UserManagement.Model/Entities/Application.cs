//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the Marvin template for generating a DbContext and Entities. 
// If you have any questions or suggestions for improvement regarding this code, contact Thomas Fuchs. I allways need feedback to improve.
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Linq;
using Marvin.Model;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace Marvin.Runtime.UserManagement.Model
{

    /// <summary>
    /// There are no comments for Marvin.Runtime.UserManagement.Model.Application in the schema.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [System.Runtime.Serialization.KnownType(typeof(Library))]
    [System.Runtime.Serialization.KnownType(typeof(ApplicationAccess))]
    public partial class Application : IEquatable<Application>, IMergeParent, IEntity    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public Application()
        {
        }


        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual long Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;

    
        /// <summary>
        /// There are no comments for ApplicationName in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual string ApplicationName
        {
            get
            {
                return _applicationName;
            }
            set
            {
                if (_applicationName != value)
                {
                    _applicationName = value;
                    OnPropertyChanged("ApplicationName");
                }
            }
        }
        private string _applicationName;

    
        /// <summary>
        /// There are no comments for ShellId in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual long ShellId
        {
            get
            {
                return _shellId;
            }
            set
            {
                if (_shellId != value)
                {
                    _shellId = value;
                    OnPropertyChanged("ShellId");
                }
            }
        }
        private long _shellId;


        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Shell in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual Library Shell
        {
            get;
            set;
        }
    
        /// <summary>
        /// There are no comments for AvailablePlugins in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual ICollection<Library> AvailablePlugins
        {
		    get; set;
        }
    
        /// <summary>
        /// There are no comments for ApplicationAccesses in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual ICollection<ApplicationAccess> ApplicationAccesses
        {
		    get; set;
        }

        #endregion
        #region IEquatable
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object other)
        {
            return Equals(other as Application); 
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The Application to compare with the current Application.</param>
        /// <returns><c>true</c> if the specified Application is equal to the current Application; otherwise, <c>false</c>.</returns>
        public bool Equals(Application other)
        {
            if((object)other == null)
                return false;
            
            // First look for Id, then compare references
            return (Id != 0 && Id == other.Id) || object.ReferenceEquals(this, other);
        }
     
        /// <summary>
        /// Compares two Application objects.
        /// </summary>
        /// <param name="a">The first Application to compare</param>
        /// <param name="b">The second Application to compare</param>
        /// <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        public static bool operator ==(Application  a, Application  b)
        {
            if((object)a == null && (object)b == null)
                return true;
            return (object)a != null && a.Equals(b);
        }

        /// <summary>
        /// Compares two Application objects.
        /// </summary>
        /// <param name="a">The first Application to compare</param>
        /// <param name="b">The second Application to compare</param>
        /// <returns><c>true</c> if the specified objects are not equal; otherwise, <c>false</c>.</returns>
        public static bool operator !=(Application  a, Application b)
        {
            return !(a == b);
        }

        #endregion
        
        /// <summary>
        /// Reference to merged child
        /// </summary>
        object IMergeParent.Child { get; set; }
    
        #region INotifyPropertyChanged Members

        /// <summary>
        /// Raised when a property value changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises a PropertyChanged event.
        /// </summary>
        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
